{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;
\red230\green230\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgray\c57415;
\csgray\c92143;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14760\viewh15240\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \
\

\f1 \'b3\'f5\'ca\'bc\'bb\'af
\f0 \
\cf4 \cb5 public init(contentsOf url: URL) throws
\f2\fs24 \

\f0\fs22 public init(data: Data) throws\
public init(contentsOf url: URL, fileTypeHint utiString: String?) throws
\f2\fs24 \

\f0\fs22 public init(data: Data, fileTypeHint utiString: String?) throws\
\cf2 \cb3 \
\
\

\f1 \'bf\'d8\'d6\'c6
\f0 \
\cf4 \cb5 open func prepareToPlay() -> Bool\
open func play() -> Bool /* sound is played asynchronously. */\
open func play(atTime time: TimeInterval)\
open func pause()
\f2\fs24 \

\f0\fs22 open func stop()\
\cf2 \cb3 \
\
\
\

\f1 \'ca\'f4\'d0\'d4
\f0 \
\cf4 \cb5 isPlaying: Bool \{ get \}  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'ca\'c7\'b7\'f1\'d5\'fd\'d4\'da\'b2\'a5\'b7\'c5
\f0 \
numberOfChannels: Int \{ get \}  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'cd\'a8\'b5\'c0\'ca\'fd
\f2\fs24 \

\f0\fs22 duration: TimeInterval \{ get \}  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'b3\'d6\'d0\'f8\'ca\'b1\'bc\'e4
\f0 \
url: URL? \{ get \}\
data: Data? \{ get \}\
pan: Float  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'c6\'bd\'d2\'c6
\f0 \
volume: Float  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'c9\'f9\'d2\'f4\'d2\'f4\'c1\'bf
\f0 \
enableRate: Bool  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'ca\'c7\'b7\'f1\'c6\'f4\'d3\'c3\'bc\'d3\'cb\'d9\'b2\'a5\'b7\'c5
\f0 \
rate: Float  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'b2\'a5\'b7\'c5\'cb\'d9\'b6\'c8 \'c4\'ac\'c8\'cf
\f0 1.0\
currentTime: TimeInterval  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1 \'b5\'b1\'c7\'b0\'b2\'a5\'b7\'c5\'ca\'b1\'bc\'e4
\f0 \
deviceCurrentTime: TimeInterval \{ get \}\
numberOfLoops: Int  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\'93numberOfLoops\'94
\f1 \'ca\'c7\'d4\'da\'b5\'bd\'b4\'ef\'bd\'e1\'ce\'b2\'ca\'b1\'c9\'f9\'d2\'f4\'bd\'ab\'b7\'b5\'bb\'d8\'b5\'bd\'bf\'aa\'ca\'bc\'b5\'c4\'b4\'ce\'ca\'fd\'a1\'a3
\f0 \
\'a0\'a0\'a0\'a0 
\f1 \'c1\'e3\'d6\'b5\'d2\'e2\'ce\'b6\'d7\'c5\'d6\'bb\'b2\'a5\'b7\'c5\'d2\'bb\'b4\'ce\'c9\'f9\'d2\'f4\'a1\'a3
\f0 \
\'a0\'a0\'a0\'a0 
\f1 \'d6\'b5\'ce\'aa
\f0 1
\f1 \'bd\'ab\'b5\'bc\'d6\'c2\'b2\'a5\'b7\'c5\'c9\'f9\'d2\'f4\'c1\'bd\'b4\'ce\'a3\'ac\'b5\'c8\'b5\'c8\'a1\'a3
\f0 \
\'a0\'a0\'a0\'a0 
\f1 \'c8\'ce\'ba\'ce\'b8\'ba\'ca\'fd\'bd\'ab\'ce\'de\'cf\'de\'d1\'ad\'bb\'b7\'a3\'ac\'d6\'b1\'b5\'bd\'cd\'a3\'d6\'b9\'a1\'a3
\f0 \cf2 \
\cb3 \
\
\
\

\f1 \'c9\'e8\'d6\'c3
\f0 \
\cf4 \cb5 open var settings: [String : Any] \{ get \}\
open var format: AVAudioFormat \{ get \}\cf2 \
\cb3 \
\
\
\
\
/* metering */
\f2\fs24 \cf0 \

\f0\fs22 \cf4 \cb5 open var isMeteringEnabled: Bool 
\f2\fs24 \

\f0\fs22 open func updateMeters()
\f2\fs24 \

\f0\fs22 open func peakPower(forChannel channelNumber: Int) -> Float
\f2\fs24 \

\f0\fs22 open func averagePower(forChannel channelNumber: Int) -> Float
\f2\fs24 \

\f0\fs22 open var channelAssignments: [AVAudioSessionChannelDescription]?\
\cf2 \cb3 \
\
\
\
\

\f1 \'b4\'fa\'c0\'ed
\f0 AVAudioPlayerDelegate\
\cf4 \cb5 optional public func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool)\
optional public func audioPlayerBeginInterruption(_ player: AVAudioPlayer)\
optional public func audioPlayerEndInterruption(_ player: AVAudioPlayer, withOptions flags: Int)\
\cf2 \cb3 \
\
}